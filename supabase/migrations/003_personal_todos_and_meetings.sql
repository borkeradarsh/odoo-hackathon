-- Add personal todos and meetings tables
-- Migration: 003_personal_todos_and_meetings.sql

-- Create personal todos table
CREATE TABLE IF NOT EXISTS todos (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  status VARCHAR(50) DEFAULT 'pending' NOT NULL,
  due_date TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create meetings table
CREATE TABLE IF NOT EXISTS meetings (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  project_id BIGINT REFERENCES projects(id) ON DELETE CASCADE NULL,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  start_time TIMESTAMP WITH TIME ZONE NOT NULL,
  end_time TIMESTAMP WITH TIME ZONE NOT NULL,
  created_by UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Enable Row Level Security
ALTER TABLE todos ENABLE ROW LEVEL SECURITY;
ALTER TABLE meetings ENABLE ROW LEVEL SECURITY;

-- RLS Policies for todos table
CREATE POLICY "Users can view their own todos" ON todos
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can create their own todos" ON todos
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own todos" ON todos
  FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own todos" ON todos
  FOR DELETE USING (auth.uid() = user_id);

-- RLS Policies for meetings table
CREATE POLICY "Users can view meetings they created or are involved in" ON meetings
  FOR SELECT USING (
    auth.uid() = created_by OR
    (project_id IS NOT NULL AND auth.uid() IN (
      SELECT user_id FROM project_members WHERE project_id = meetings.project_id
    )) OR
    (project_id IS NOT NULL AND auth.uid() IN (
      SELECT created_by FROM projects WHERE id = meetings.project_id
    ))
  );

CREATE POLICY "Users can create meetings" ON meetings
  FOR INSERT WITH CHECK (
    auth.uid() = created_by AND
    (project_id IS NULL OR auth.uid() IN (
      SELECT user_id FROM project_members WHERE project_id = meetings.project_id
    ) OR auth.uid() IN (
      SELECT created_by FROM projects WHERE id = meetings.project_id
    ))
  );

CREATE POLICY "Meeting creators can update their meetings" ON meetings
  FOR UPDATE USING (auth.uid() = created_by);

CREATE POLICY "Meeting creators can delete their meetings" ON meetings
  FOR DELETE USING (auth.uid() = created_by);

-- Enable Realtime
ALTER PUBLICATION supabase_realtime ADD TABLE todos;
ALTER PUBLICATION supabase_realtime ADD TABLE meetings;

-- Create indexes
CREATE INDEX IF NOT EXISTS idx_todos_user_id ON todos(user_id);
CREATE INDEX IF NOT EXISTS idx_todos_status ON todos(status);
CREATE INDEX IF NOT EXISTS idx_todos_due_date ON todos(due_date);
CREATE INDEX IF NOT EXISTS idx_meetings_project_id ON meetings(project_id);
CREATE INDEX IF NOT EXISTS idx_meetings_created_by ON meetings(created_by);
CREATE INDEX IF NOT EXISTS idx_meetings_start_time ON meetings(start_time);
